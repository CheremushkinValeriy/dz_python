# Обязательная:
# 40. Реализуйте RLE алгоритм: реализуйте модуль сжатия и восстановления данных.
# Модуль сжатия:
# Для чисел:
# Входные данные:
# 111112222334445
# Выходные данные:
# 5142233415
# Также должно работать и для букв:
# Входные данные:
# AAAAAAFDDCCCCCCCAEEEEEEEEEEEEEEEEE
# Выходные данные:
# 6A1F2D7C1A17E
# (5 - количество единиц, далее сама единица, 4 - количество двоек, далее сама двойка и т.д)
# Модуль восстановления работaет в обратную сторону - из строки выходных данных, получить строку входных данных.

def encode(s):
    encoding = "" # сохраняет выходную строку
    i = 0
    while i < len(s):
        # подсчитывает количество вхождений символа в индексе `i`
        count = 1
        while i + 1 < len(s) and s[i] == s[i + 1]:
            count = count + 1
            i = i + 1
        # добавляет к результату текущий символ и его количество
        encoding += str(count) + s[i]
        i = i + 1
    return encoding
 
if __name__ == '__main__':
    s = 'AAAAAAFDDCCCCCCCAEEEEEEEEEEEEEEEEE'

    print(encode(s))
